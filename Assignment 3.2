{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d295e617-8068-4771-a5b8-0646deede43a",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "08b12493-89a7-4d68-a582-e1ab6fc66275",
   "metadata": {},
   "outputs": [],
   "source": [
    "s1= {2,4,6,8,10}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "79f6b230-0b6d-40a5-850b-4d05191ad54a",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1864518843.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[2], line 2\u001b[0;36m\u001b[0m\n\u001b[0;31m    print(type (s1)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "print (s1)\n",
    "   print(type (s1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0f0937f5-2fad-49da-a0cc-9385ccc3732e",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'USA' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[3], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m s2 \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mset\u001b[39m ([ \u001b[43mUSA\u001b[49m,CHINA,UK, RUSSIA, INDIA, FRANCE,])\n",
      "\u001b[0;31mNameError\u001b[0m: name 'USA' is not defined"
     ]
    }
   ],
   "source": [
    "s2 = set ([ USA,CHINA,UK, RUSSIA, INDIA, FRANCE,])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "556d021b-d423-4c8c-98d6-963bb95ec3c9",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1904176979.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[4], line 2\u001b[0;36m\u001b[0m\n\u001b[0;31m    print (type(s2)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "print (s2)\n",
    "   print (type(s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57159f42-68d9-4af5-9c6d-79696fbf8bc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "07b0213b-6ecd-4c9f-9265-6ca062c42314",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1287442688.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[5], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    1 st = [ 2,4,6,8,]\u001b[0m\n\u001b[0m      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "1 st = [ 2,4,6,8,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4a875402-c76b-4f05-9e97-8d337e1ed56b",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (2016266313.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[6], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    D1 = { item, item **2 for item in 1st}\u001b[0m\n\u001b[0m                                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "D1 = { item, item **2 for item in 1st}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "375ba992-bb48-4587-8663-1a6a8f0dc1c5",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'd1' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[7], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m (\u001b[43md1\u001b[49m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'd1' is not defined"
     ]
    }
   ],
   "source": [
    "print (d1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6e95a9b5-6d5f-410c-bb4f-50bc0ee2a41a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# to creat a diet of only odd elements "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "050d6e83-9435-4833-975d-1eeee665542f",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = [1,2,3,4,5,6,7,8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4dd8875c-3c6f-44ab-ba6e-ffc7e09651a2",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1916491138.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[10], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    D2 = {item: item ** 2 for item in arr if item % 2 ! = 0}\u001b[0m\n\u001b[0m                                                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "D2 = {item: item ** 2 for item in arr if item % 2 ! = 0}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08b1dfb2-0b22-42a8-b502-fc35def7c179",
   "metadata": {},
   "outputs": [],
   "source": [
    "print (2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ffdb548-d31e-4723-a4f7-4858561b68db",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7597d2be-b8d6-4a8d-abed-9f322e91b219",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "cannot assign to expression here. Maybe you meant '==' instead of '='? (1532923962.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[11], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    a- tuple = (1,3,5)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to expression here. Maybe you meant '==' instead of '='?\n"
     ]
    }
   ],
   "source": [
    "a- tuple = (1,3,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "edbea3ff-68cc-488f-b6a2-d504499a258e",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "closing parenthesis ']' does not match opening parenthesis '(' (301099994.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[12], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    an - int = int (a- tuple(0)]\u001b[0m\n\u001b[0m                               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m closing parenthesis ']' does not match opening parenthesis '('\n"
     ]
    }
   ],
   "source": [
    "an - int = int (a- tuple(0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0e9ca4ba-6ea0-417b-8f6d-effb888efb39",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'an' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[13], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m (\u001b[43man\u001b[49m \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mint\u001b[39m) \u001b[38;5;66;03m# 1\u001b[39;00m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'an' is not defined"
     ]
    }
   ],
   "source": [
    "print (an - int) # 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e457295e-c70a-4f80-8d8e-99adb8c24a54",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9221999b-108d-4481-83cf-2a2da94cd80a",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2141128342.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[14], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    Sort the both arrays a (1,2,3,)\u001b[0m\n\u001b[0m         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Sort the both arrays a (1,2,3,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cd8ec742-a24f-4267-ac9c-b11b2537c7b6",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (2671190312.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[15], line 2\u001b[0;36m\u001b[0m\n\u001b[0;31m    Result= 0\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "B(4,5,6)\n",
    "  Result= 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "545eb905-d62e-4914-af86-8864819bdeb5",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'A' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[16], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mA\u001b[49m (\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m3\u001b[39m), B ( \u001b[38;5;241m4\u001b[39m\u001b[38;5;241m<\u001b[39m\u001b[38;5;241m5\u001b[39m\u001b[38;5;241m>\u001b[39m\u001b[38;5;241m6\u001b[39m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'A' is not defined"
     ]
    }
   ],
   "source": [
    "A (1,2,3), B ( 4<5>6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7c3e1d08-4066-4eaa-8210-b9803d840310",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (4136022007.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[17], line 2\u001b[0;36m\u001b[0m\n\u001b[0;31m    O+6=6\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "Result = Result + A[1]* B[n-i-1]\n",
    "               O+6=6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b16cc457-1f40-49f7-94d1-3c4c77e00700",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1f7f497a-5dc6-48e8-a645-594c969938d7",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (325868277.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[18], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    Number= int (input ( '' Enter a number'')\u001b[0m\n\u001b[0m                         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "Number= int (input ( '' Enter a number'')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0ed28fdd-2033-4dc7-ade4-a936dd7c6bd6",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3348068317.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[19], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    if number % 3 ==n number %\u001b[0m\n\u001b[0m                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "if number % 3 ==n number %\n",
    "   11==0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ac448df5-b8d8-48c2-9443-3c3742ecd943",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (960038.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[20], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    Print ( Number is divisible by both 3 & 11)\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "Print ( Number is divisible by both 3 & 11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "36877411-b3bf-4910-a22f-c3c4a5129a69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " number is not divisible by 3 and 11\n"
     ]
    }
   ],
   "source": [
    "print (\" number is not divisible by 3 and 11\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ac86ac1-7b28-4906-a116-b4812c2d2210",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q.6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b91f3b2-73df-43ae-8f11-52554efe0907",
   "metadata": {},
   "outputs": [],
   "source": [
    "1) Text = ['' Php, '' W3r'', \"Python)\n",
    "2) Print ( \" Original list of strings\"')\n",
    "3) Print ( Text )\n",
    "4) Result == List ( Filter ( Lambadax :)\n",
    "5) Print ( '' \\ n List of Prlindro"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
